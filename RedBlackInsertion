class Node:
    def __init__(self, key, color, parent=None, left=None, right=None):
        self.key = key
        self.color = color  # 'R' for red, 'B' for black
        self.parent = parent
        self.left = left
        self.right = right


class RedBlackTree:
    def __init__(self):
        self.NIL_LEAF = Node(None, 'B')
        self.root = self.NIL_LEAF

    def left_rotate(self, x):
        y = x.right
        x.right = y.left
        if y.left != self.NIL_LEAF:
            y.left.parent = x

        y.parent = x.parent
        if x.parent is None:
            self.root = y
        elif x == x.parent.left:
            x.parent.left = y
        else:
            x.parent.right = y
        y.left = x
        x.parent = y

    def right_rotate(self, y):
        x = y.left
        y.left = x.right
        if x.right != self.NIL_LEAF:
            x.right.parent = y

        x.parent = y.parent
        if y.parent is None:
            self.root = x
        elif y == y.parent.left:
            y.parent.left = x
        else:
            y.parent.right = x
        x.right = y
        y.parent = x

    def insert(self, key):
        node = Node(key, 'R')
        node.parent = None
        node.key = key
        node.left = self.NIL_LEAF
        node.right = self.NIL_LEAF
        node.color = 'R'

        parent = None
        current = self.root
        while current != self.NIL_LEAF:
            parent = current
            if node.key < current.key:
                current = current.left
            else:
                current = current.right

        node.parent = parent
        if parent is None:
            self.root = node
        elif node.key < parent.key:
            parent.left = node
        else:
            parent.right = node

        if node.parent is None:
            node.color = 'B'
            return

        if node.parent.parent is None:
            return

        self._insert_fixup(node)

    def _insert_fixup(self, k):
        while k.parent.color == 'R':
            if k.parent == k.parent.parent.right:
                u = k.parent.parent.left
                if u.color == 'R':
                    u.color = 'B'
                    k.parent.color = 'B'
                    k.parent.parent.color = 'R'
                    k = k.parent.parent
                else:
                    if k == k.parent.left:
                        k = k.parent
                        self.right_rotate(k)
                    k.parent.color = 'B'
                    k.parent.parent.color = 'R'
                    self.left_rotate(k.parent.parent)
            else:
                u = k.parent.parent.right
                if u.color == 'R':
                    u.color = 'B'
                    k.parent.color = 'B'
                    k.parent.parent.color = 'R'
                    k = k.parent.parent
                else:
                    if k == k.parent.right:
                        k = k.parent
                        self.left_rotate(k)
                    k.parent.color = 'B'
                    k.parent.parent.color = 'R'
                    self.right_rotate(k.parent.parent)
            if k == self.root:
                break
        self.root.color = 'B'


# Helper function to print the tree (inorder traversal)
def inorder_traversal(node):
    if node != None:
        inorder_traversal(node.left)
        print(node.key, node.color)
        inorder_traversal(node.right)


# Example usage
if __name__ == "__main__":
    tree = RedBlackTree()
    keys = [10, 20, 30, 40, 50, 60, 70, 80, 90]
    
    for key in keys:
        tree.insert(key)

    print("Inorder traversal of the Red-Black Tree:")
    inorder_traversal(tree.root)
